{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initLocale","getDirection","locale","navigator","language","LocalizationWrapper","useState","setLocale","messages","setMessages","useEffect","loadMessages","then","direction","onLocaleChange","App","intl","useIntl","style","textAlign","value","onChange","e","target","dir","padding","data-testid","id","values","name","count","gender","b","num","amount","currency","Date","now","year","month","day","numeric","updateIntervalInSeconds","type","formatMessage","formatNumber","formatDate","formatTime","formatRelativeTime","formatList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a119a36.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useIntl,\r\n  IntlProvider,\r\n  FormattedMessage,\r\n  FormattedDate,\r\n  FormattedTime,\r\n  FormattedRelativeTime,\r\n  FormattedNumber,\r\n  FormattedList,\r\n} from \"react-intl\";\r\n\r\nlet initLocale = \"en\";\r\nif (navigator.language === \"es-MX\") {\r\n  initLocale = \"es-MX\";\r\n} else if (navigator.language === \"ar\") {\r\n  initLocale = \"ar\";\r\n}\r\n\r\nfunction loadMessages(locale) {\r\n  switch (locale) {\r\n    case \"ar\":\r\n      return import(\"./lang/ar.json\");\r\n    case \"en\":\r\n      return import(\"./lang/en.json\");\r\n    case \"es-MX\":\r\n      return import(\"./lang/es-MX.json\");\r\n    default:\r\n      return import(\"./lang/en.json\");\r\n  }\r\n}\r\n\r\nfunction getDirection(locale) {\r\n  switch (locale) {\r\n    case \"ar\":\r\n      return \"rtl\";\r\n    case \"en\":\r\n      return \"ltr\";\r\n    case \"es-MX\":\r\n      return \"ltr\";\r\n    default:\r\n      return \"ltr\";\r\n  }\r\n}\r\n\r\nfunction LocalizationWrapper() {\r\n  const [locale, setLocale] = useState(initLocale);\r\n  const [messages, setMessages] = useState(null);\r\n\r\n  useEffect(() => loadMessages(locale).then(setMessages), [locale]);\r\n\r\n  return messages ? (\r\n    <IntlProvider locale={locale} messages={messages}>\r\n      <App locale={locale} direction={getDirection(locale)} onLocaleChange={(locale) => setLocale(locale)} />\r\n    </IntlProvider>\r\n  ) : null;\r\n}\r\nexport default LocalizationWrapper;\r\n\r\nfunction App({ locale, direction, onLocaleChange }) {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <select value={locale} onChange={(e) => onLocaleChange(e.target.value)}>\r\n          <option value=\"en\">en</option>\r\n          <option value=\"es-MX\">es-MX</option>\r\n          <option value=\"ar\">ar</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div dir={direction} style={{ padding: 20 }} data-testid=\"examples\">\r\n        <h3>Declarative examples</h3>\r\n        <FormattedMessage id=\"message.simple\" />\r\n        <br />\r\n        <FormattedMessage id=\"message.argument\" values={{ name: \"John\" }} />\r\n        <br />\r\n        <FormattedMessage id=\"message.plural\" values={{ count: 6 }} />\r\n        <br />\r\n        <FormattedMessage id=\"message.select\" values={{ gender: \"female\" }} />\r\n        <br />\r\n        <FormattedMessage id=\"message.text-format\" values={{ b: (value) => <b>{value}</b> }} />\r\n        <br />\r\n        <FormattedMessage id=\"message.number-format\" values={{ num: 7500 }} />\r\n        <br />\r\n        <FormattedMessage id=\"message.currency-format\" values={{ amount: 7.5 }} />\r\n        <br />\r\n        <FormattedNumber value={7500} />\r\n        <br />\r\n        <FormattedNumber value={7.5} style=\"currency\" currency=\"USD\" /> {/* eslint-disable-line */}\r\n        <br />\r\n        <FormattedDate value={Date.now()} year=\"numeric\" month=\"long\" day=\"2-digit\" />\r\n        <br />\r\n        <FormattedTime value={Date.now()} />\r\n        <br />\r\n        <FormattedRelativeTime value={0} numeric=\"auto\" updateIntervalInSeconds={1} />\r\n        <br />\r\n        <FormattedList type=\"conjunction\" value={[\"foo\", \"bar\", \"baz\"]} />\r\n\r\n        <h3>Imperative examples</h3>\r\n        {intl.formatMessage({ id: \"message.simple\" })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.argument\" }, { name: \"John\" })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.plural\" }, { count: 5 })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.select\" }, { gender: \"female\" })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.text-format\" }, { b: (value) => <b>{value}</b> })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.number-format\" }, { num: 7500 })}\r\n        <br />\r\n        {intl.formatMessage({ id: \"message.currency-format\" }, { amount: 7.5 })}\r\n        <br />\r\n        {intl.formatNumber(7500)}\r\n        <br />\r\n        {intl.formatNumber(7.5, { style: \"currency\", currency: \"USD\" })}\r\n        <br />\r\n        {intl.formatDate(Date.now(), { year: \"numeric\", month: \"long\", day: \"2-digit\" })}\r\n        <br />\r\n        {intl.formatTime(Date.now())}\r\n        <br />\r\n        {intl.formatRelativeTime(-5, \"second\", { style: \"narrow\" })}\r\n        <br />\r\n        {intl.formatList([\"foo\", \"bar\", \"baz\"], { type: \"conjunction\" })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}